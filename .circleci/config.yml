version: 2
jobs:
  build:
    docker:
      - image: ghcr.io/h3poteto/golang:1.17.3
        environment:
          GO111MODULE: "on"
          APPROOT: /go/src/github.com/h3poteto/fascia
          APPENV: test
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_DB: fascia_test
          POSTGRES_USER: master
          POSTGRES_PASSWORD: docker
      - image: postgres:13.9-alpine
        environment:
          POSTGRES_USER: master
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: fascia_test

    working_directory: /go/src/github.com/h3poteto/fascia
    steps:
      - checkout
      - run:
          name: Check golang version
          command: go version
      - run:
          name: Install
          command: go mod download
      - run:
          name: Migration database
          command: goose -env test up
      - run:
          name: Server test
          command: ginkgo -r ./

  assets:
    docker:
      - image: node:14.21-buster-slim
    working_directory: /var/opt/app
    steps:
      - checkout
      - run:
          name: Certificates
          command: |
            apt-get update
            apt-get install -y ca-certificates
      - restore_cache:
          name: Restoring cache - node_modules
          keys:
            - node-{{ arch }}-14.18-{{ .Environment.CACHE_KEY }}-{{ checksum "assets/package.json" }}-{{ checksum "assets/package-lock.json" }}
      - run:
          name: Install
          working_directory: /var/opt/app/assets
          command: npm install
      - run:
          name: Build
          working_directory: /var/opt/app/assets
          command: npm run compile
      - save_cache:
          name: Saving cache - node_modules
          key: node-{{ arch }}-14.18-{{ .Environment.CACHE_KEY }}-{{ checksum "assets/package.json" }}-{{ checksum "assets/package-lock.json" }}
          paths:
            - "/var/opt/app/assets/node_modules"

  lp:
    docker:
      - image: node:14.21-buster-slim
    working_directory: /var/opt/app
    steps:
      - checkout
      - run:
          name: Certificates
          command: |
            apt-get update
            apt-get install -y ca-certificates
      - restore_cache:
          name: Restoring cache - node_modules
          keys:
            - node-{{ arch }}-14.18-{{ .Environment.CACHE_KEY }}-{{ checksum "lp/package.json" }}-{{ checksum "lp/package-lock.json" }}
      - run:
          name: Install
          working_directory: /var/opt/app/lp
          command: npm install
      - run:
          name: Build
          working_directory: /var/opt/app/lp
          command: npm run compile
      - save_cache:
          name: Saving cache - node_modules
          key: node-{{ arch }}-14.18-{{ .Environment.CACHE_KEY }}-{{ checksum "lp/package.json" }}-{{ checksum "lp/package-lock.json" }}
          paths:
            - "/var/opt/app/lp/node_modules"

  image:
    machine: true
    steps:
      - checkout
      - run:
          name: Check docker version
          command: docker version
      - run:
          name: Docker build
          command: |
            docker build -t $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 .
            docker tag $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 $AWS_ECR_REPOSITORY:latest
      - run:
          name: Docker push
          command: |
            aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin https://564677439943.dkr.ecr.ap-northeast-1.amazonaws.com
            docker push $AWS_ECR_REPOSITORY:$CIRCLE_SHA1
            docker push $AWS_ECR_REPOSITORY:latest

  create_pull_request:
    docker:
      - image: circleci/golang:1.17-buster
    steps:
      - run:
          name: Install_hub
          command: |
            curl -sSLf https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz | \
            tar zxf - --strip-components=1 -C /tmp/ && \
            sudo mv /tmp/bin/hub /usr/local/bin/hub
            hub --version
      - run:
          name: Install kustomize
          command: |
            curl -sSLf https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | \
            tar zxf - -C /tmp/ && \
            sudo mv /tmp/kustomize /usr/local/bin/kustomize
            kustomize version
      - run:
          name: Update_tag_and_create_pr
          command: |
            git config --global user.name ${GITHUB_NAME}
            git config --global user.email ${GITHUB_EMAIL}
            git clone https://${GITHUB_NAME}:${GITHUB_TOKEN}@github.com/h3poteto/k8s-services.git
            cd k8s-services
            git init
            git checkout -b update-fascia-image-${CIRCLE_SHA1}
            cd external-prd/fascia
            kustomize edit set image "go=${AWS_ECR_REPOSITORY}:${CIRCLE_SHA1}"
            git add .
            git commit -m "Update docker image for fascia to ${CIRCLE_SHA1}"
            git push --set-upstream origin update-fascia-image-${CIRCLE_SHA1}
            hub pull-request -m "[Image update] fascia ${CIRCLE_SHA1}"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - assets
      - lp
      - image:
          filters:
            branches:
              only:
                - master
      - create_pull_request:
          filters:
            branches:
              only:
                - master
          requires:
            - image
            - build
            - assets
            - lp

