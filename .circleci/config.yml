version: 2
jobs:
  build:
    docker:
      - image: h3poteto/golang:1.13.4
        environment:
          GO111MODULE: "on"
          APPROOT: /go/src/github.com/h3poteto/fascia
          APPENV: test
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_DB: fascia_test
          POSTGRES_USER: master
          POSTGRES_PASSWORD: docker
      - image: postgres:11.2-alpine
        environment:
          POSTGRES_USER: master
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: fascia_test

    working_directory: /go/src/github.com/h3poteto/fascia
    steps:
      - checkout
      - run:
          name: Check golang version
          command: go version
      - restore_cache:
          name: Restoring cache - vendor
          keys:
            - mod-{{ arch }}-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
      - run:
          name: Install
          command: go mod download
      - run:
          name: Generate assets file
          command: go generate
      - save_cache:
          name: Saving cache - vendor
          key: mod-{{arch }}-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Migration database
          command: goose -env test up
      - run:
          name: Server test
          command: ginkgo -r ./

  assets:
    docker:
      - image: node:12.18.0-alpine3.12
    working_directory: /var/opt/app
    steps:
      - checkout
      - restore_cache:
          name: Restoring cache - node_modules
          working_directory: /var/opt/app/assets
          keys:
            - node-{{ arch }}-12.18.0-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install
          working_directory: /var/opt/app/assets
          command: npm install
      - run:
          name: Build
          working_directory: /var/opt/app/assets
          command: npm run compile
      - save_cache:
          name: Saving cache - node_modules
          working_directory: /var/opt/app/assets
          key: node-{{ arch }}-12.18.0-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - "/var/opt/app/assets/node_modules"

  image:
    machine: true
    steps:
      - checkout
      - run:
          name: Check docker version
          command: docker version
      - run:
          name: Docker build
          command: |
            docker build -t $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 .
            docker tag $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 $AWS_ECR_REPOSITORY:latest
      - run:
          name: Docker push
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker push $AWS_ECR_REPOSITORY:$CIRCLE_SHA1
            docker push $AWS_ECR_REPOSITORY:latest

  deploy:
    docker:
      - image: h3poteto/kubectl:latest
        environment:
          CLUSTER_NAME: external-prd-20200329.k8s.h3poteto.dev
    working_directory: /var/opt/kube
    steps:
      - run:
          name: entrypoint
          command: |
            /var/opt/kube/entrypoint.sh
      - run:
          name: install kube-job
          command: |
            wget https://github.com/h3poteto/kube-job/releases/download/v0.3.1/kube-job_0.3.1_linux_amd64.zip
            unzip kube-job_0.3.1_linux_amd64.zip
            ./kube-job version
      - run:
          name: clone k8s services
          command: |
            git clone https://github.com/h3poteto/k8s-services.git
      - run:
          name: version
          command: |
            kubectl version
      - run:
          name: migration
          command: |
            ./kube-job run --config=$HOME/.kube/config --template-file=k8s-services/external-prd/fascia/job.yml --args="goose -env production up" --container="go"
      - run:
          name: deploy
          command: |
            kubectl patch -f k8s-services/external-prd/fascia/deployment.yml -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"go\",\"image\":\"${AWS_ECR_REPOSITORY}:${CIRCLE_SHA1}\"}]}}}}"


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - assets
      - image:
          filters:
            branches:
              only:
                - master
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - image
            - build
            - assets

