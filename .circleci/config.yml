version: 2
jobs:
  build:
    docker:
      - image: h3poteto/golang:1.9.4
        environment:
          APPROOT: /go/src/github.com/h3poteto/fascia
          APPENV: test
          DATABASE_URL: 127.0.0.1
          DB_TEST_NAME: fascia_test
          DB_USER: root
          # MySQLの起動チェック用
          HEALTH_CHECK_RETRY_LIMIT: 10
          HEALTH_CHECK_RETRY_WAIT: 3
      - image: mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes

    working_directory: /go/src/github.com/h3poteto/fascia
    steps:
      - checkout
      - run:
          name: Check golang version
          command: go version
      - restore_cache:
          name: Restoring cache - vendor
          keys:
            - vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          name: Generate assets file
          command: go generate
      - run:
          name: Go packages install
          command: .circleci/scripts/dep_ensure.sh
      - save_cache:
          name: Saving cache - vendor
          key: vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - "vendor"
      - run:
          name: Checking mysql connection
          command: |
            for i in $(seq $HEALTH_CHECK_RETRY_LIMIT)
            do
              mysql -u root -h 127.0.0.1 -e 'show databases' || (sleep $HEALTH_CHECK_RETRY_WAIT; false) && break
            done
      - run:
          name: Create database
          command: mysql -u root -h 127.0.0.1 -e "CREATE DATABASE $DB_TEST_NAME CHARACTER SET utf8mb4;"
      - run:
          name: Migration database
          command: goose -env test up
      - run:
          name: Server test
          command: ginkgo -r ./

  frontend:
    docker:
      - image: node:9-alpine
    working_directory: /go/src/github.com/h3poteto/fascia
    steps:
      - checkout
      - run:
          name: Check node version
          command: |
            node --version
            npm --version
      - restore_cache:
          name: Restoring cache - node_modules
          keys:
            - node_modules-{{ arch }}-{{ .Environment.COMMON_CACHE_KEY }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Node packages install
          command: npm install
      - save_cache:
          name: Saving cache - node_modules
          key: node_modules-{{ arch }}-{{ .Environment.COMMON_CACHE_KEY }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: Build manifest file
          command: npm run compile
      - run:
          name: Frontend test
          command: npm run test

  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Check docker version
          command: docker version
      - run:
          name: Docker build
          command: docker build -t $AWS_ECR_REPOSITORY:latest .
      - run:
          name: Docker push
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker push $AWS_ECR_REPOSITORY:latest

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - frontend
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - frontend

