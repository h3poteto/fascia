version: 2
jobs:
  build:
    docker:
      - image: h3poteto/golang-node:1.8.3-7
        environment:
          APPROOT: /go/src/github.com/h3poteto/fascia
          APPENV: test
          DATABASE_URL: 127.0.0.1
          DB_TEST_NAME: fascia_test
          DB_USER: root
          # MySQLの起動チェック用
          HEALTH_CHECK_RETRY_LIMIT: 10
          HEALTH_CHECK_RETRY_WAIT: 3
        user: root
      - image: mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes

    working_directory: /go/src/github.com/h3poteto/fascia
    steps:
      - checkout
      - run:
          name: Check golang version
          command: go version
      - run:
          name: Check node version
          command: node --version
      - restore_cache:
          name: Restoring cache - vendor
          keys:
            - vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          name: Restoring cache - node_modules
          keys:
            - node_modules-{{ checksum "package.json" }}
            - node_modules-
      - run:
          name: Generate assets file
          command: go generate
      - run:
          name: Go packages install
          command: .circleci/scripts/dep_ensure.sh
      - save_cache:
          name: Saving cache - vendor
          key: vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - "vendor"
      - run:
          name: Node packages install
          command: npm install
      - save_cache:
          name: Saving cache - node_modules
          key: node_modules-{{ checksum "package.json" }}
          paths:
            - "node_modules"
      - run:
          name: Checking mysql connection
          command: |
            for i in $(seq $HEALTH_CHECK_RETRY_LIMIT)
            do
              mysql -u root -h 127.0.0.1 -e 'show databases' || (sleep $HEALTH_CHECK_RETRY_WAIT; false) && break
            done
      - run:
          name: Create database
          command: mysql -u root -h 127.0.0.1 -e "CREATE DATABASE $DB_TEST_NAME CHARACTER SET utf8mb4;"
      - run:
          name: Migration database
          command: goose -env test up
      - run:
          name: Server test
          command: ginkgo -r ./
      - run:
          name: Frontend test
          command: npm run test
      - deploy:
          name: conditionally run a deploy job
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              curl --user ${CIRCLE_API_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=deploy \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
            fi

  deploy:
    docker:
      - image: h3poteto/golang-node:1.8.3-7
        user: root
        environment:
          AWS_ECR_REPOSITORY: 564677439943.dkr.ecr.ap-northeast-1.amazonaws.com/h3poteto/fascia
    working_directory: /go/src/github.com/h3poteto/fascia
    branches:
      only:
        - master
    steps:
      - checkout
      - setup_remote_docker:
          reusable: true
          exclusive: true
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.05.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - restore_cache:
          name: Restoring cache - node_modules
          keys:
            - node_modules-{{ checksum "package.json" }}
            - node_modules-
      - run:
          name: Node packages install
          command: npm install
      - run:
          name: Compile frontend javascripts
          command: npm run release-compile
      - run:
          name: Install aws command
          command: |
            apk add --no-cache py-pip
            pip install awscli
      - run:
          name: Build and push
          command: |
            $(aws ecr get-login --region ap-northeast-1)
            docker build -t $AWS_ECR_REPOSITORY:latest .
            docker push $AWS_ECR_REPOSITORY:latest
